// generated by Textmapper; DO NOT EDIT

package ll

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	NoType NodeType = iota
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var ruleNodeType = [...]NodeType{
	0, // Expression_optlist : Expression_optlist Expression
	0, // Expression_optlist :
	0, // File : Expression_optlist
	0, // Expression : FunctionAbstraction
	0, // Expression : FunctionApplication
	0, // Expression : Literal
	0, // FunctionAbstraction : '(' '\\' identifier_list_Comma_separated_opt '->' Expression ')'
	0, // FunctionAbstraction : '(' '\\' '_' '->' Expression ')'
	0, // identifier_list_Comma_separated : identifier_list_Comma_separated ',' identifier
	0, // identifier_list_Comma_separated : identifier
	0, // identifier_list_Comma_separated_opt : identifier_list_Comma_separated
	0, // identifier_list_Comma_separated_opt :
	0, // Expression_list_Comma_separated : Expression_list_Comma_separated ',' Expression
	0, // Expression_list_Comma_separated : Expression
	0, // Expression_list_Comma_separated_opt : Expression_list_Comma_separated
	0, // Expression_list_Comma_separated_opt :
	0, // FunctionApplication : FunctionAbstraction '[' Expression_list_Comma_separated_opt ']'
	0, // Literal : intLit
}



sys.open(path : String) : (File, (#ok|FileErr))

// Assumes casual csv files.
main():-
   {error} = read()
   pritn erweorj woerjweo rjow

// Assume delimeter.
delimeter = ','

want_column = "1"

(f, ok) = sys.open("file.csv")
(column_names : lines) = f.lines

// Dynamically create struct with field names from column_names
line_to_record = func(line: String, column_names: a) ({...}) =>
   values, count = explode_on delimeter line
   return to_associative_array column_names values

// records = [ {"A": a, "B": b, "C": c}, ...]
// Solved flip with named parameters, currying in arbitrary orders(!)
records = map lines line_to_record(column_names: column_names)

is = func(x: a, y: a) =>
   return x = y

values = map records ( (record) => record[name] )

:: String -> String -> [String]
explode_on_delimiter = explode_on delimeter

// Brother approved :+1:
records = map lines (line => explode_on_delimiter line | (values, _, _) -> to_associative_array column_names values)

Expr
   : ValExpr
   | ArityExpr
   | FuncExpr
   | ReturnExpr
   | MatchExpr
   | ConcatExpr
   | Lit
;

   FuncExpr
      : "func"
   ;

add(x, y : Number) : Number { x + y }

add := func(x, y int) int { return x + y }

map(f : func(a): b, l: List<a>)

f := \() => x + y

map f [(a, b), (c, d)]

x = ;;

f((1, 2))
f(1, 2)


ConcatExpr
   : "asdf" ++ "bar"
   | 'a' ++ "bar"
   | "asdf" ++ 'a'
;

Lit
   : IntLit
   | RealLit
   | StringLit
;

RealLit
   : FractionLit
   | DecimalLit
   | SciLit
;

EOF : Atom { eof };

Bool : Atom {
   true
   false
}

=

if true or false {

}

val s [](Token|EOF) = "asdf" + EOF + "bar"

let x = 10

x :=

x := 10

c : range s {
   if c == \x00 { break}
}

val s string =

// instead of enum (without value).
Atom
   :
;

Type
   | BaseType
   | CompositeType
;

CompositeType
   :

BaseType
   : Decimal
   | Int
   | Byte
   | Char // rune
   | String // [...]rune
   | Float
;

val x : decimal_e-15 = 0.1

IntLit
   | BinIntLit
   | HexIntLit
   | DecIntLit
;

0x7A
0b10101
123

// generated by Textmapper; DO NOT EDIT

package ll

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the typeless language.
type Symbol int

var symbolStr = [...]string{
	"Expression_optlist",
	"File",
	"Expression",
	"FunctionAbstraction",
	"identifier_list_Comma_separated",
	"identifier_list_Comma_separated_opt",
	"Expression_list_Comma_separated",
	"Expression_list_Comma_separated_opt",
	"FunctionApplication",
	"Literal",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-3, -11, -1, 17, 0, -19, 4, 5, -35, -43, 9, -1, -51, -1, 13, -57,
	-1, -1, -1, -1, -1, 16, -1, 8, -1, 12, 7, 6, -1, -2,
}

var tmLalr = []int32{
	0, 1, 3, 1, 11, 1, -1, -2, 3, -1, 11, -1, 0, 2, -1, -2,
	5, -1, 0, 3, 3, 3, 4, 3, 6, 3, 7, 3, 11, 3, -1, -2,
	2, -1, 10, -1, 9, 11, -1, -2, 3, -1, 11, -1, 6, 15, -1, -2,
	7, -1, 9, 10, -1, -2, 7, -1, 6, 14, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 6, 16, 20, 22, 24, 28, 30, 34, 36, 46, 48, 50, 60,
	70, 72, 74, 76, 78, 88, 98,
}

var tmFromTo = []int8{
	28, 29, 8, 10, 18, 23, 1, 2, 9, 2, 17, 2, 19, 2, 20, 2,
	22, 26, 24, 27, 5, 9, 16, 21, 12, 18, 15, 20, 2, 8, 11, 17,
	13, 19, 8, 11, 1, 3, 9, 3, 17, 3, 19, 3, 20, 3, 0, 1,
	0, 28, 1, 4, 9, 14, 17, 22, 19, 24, 20, 25, 1, 5, 9, 5,
	17, 5, 19, 5, 20, 5, 8, 12, 8, 13, 9, 15, 9, 16, 1, 6,
	9, 6, 17, 6, 19, 6, 20, 6, 1, 7, 9, 7, 17, 7, 19, 7,
	20, 7,
}

var tmRuleLen = []int8{
	2, 0, 1, 1, 1, 1, 6, 6, 3, 1, 1, 0, 3, 1, 1, 0,
	4, 1,
}

var tmRuleSymbol = []int32{
	12, 12, 13, 14, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19,
	20, 21,
}
